"use strict";(self.webpackChunkdemos=self.webpackChunkdemos||[]).push([[290],{40290:(e,n,s)=>{s.r(n),s.d(n,{sources:()=>a});const a=[{filename:"component.ts",contents:{raw:s(64946),highlighted:s(82604)}},{filename:"template.html",contents:{raw:s(50838),highlighted:s(87568)}},{filename:"module.ts",contents:{raw:s(41818),highlighted:s(16211)}}]},82604:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a='<span class="hljs-keyword">import</span> {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n} from <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> {\n  CalendarEvent,\n  CalendarMonthViewDay,\n  CalendarView,\n} from <span class="hljs-string">\'angular-calendar\'</span>;\n<span class="hljs-keyword">import</span> { Subject } from <span class="hljs-string">\'rxjs\'</span>;\n\n<span class="hljs-keyword">const</span> RED_CELL: <span class="hljs-string">\'red-cell\'</span> = <span class="hljs-string">\'red-cell\'</span>;\n<span class="hljs-keyword">const</span> BLUE_CELL: <span class="hljs-string">\'blue-cell\'</span> = <span class="hljs-string">\'blue-cell\'</span>;\n\n@Component({\n  selector: <span class="hljs-string">\'mwl-demo-component\'</span>,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: <span class="hljs-string">\'template.html\'</span>,\n  styles: [\n    `\n      .red-cell {\n        background-color: red !important;\n      }\n      .blue-cell {\n        background-color: blue !important;\n      }\n    `,\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();\n\n  events: CalendarEvent[] = [];\n\n  refresh = <span class="hljs-keyword">new</span> Subject&lt;<span class="hljs-built_in">void</span>&gt;();\n\n  cssClass: <span class="hljs-built_in">string</span> = RED_CELL;\n\n  refreshView(): <span class="hljs-built_in">void</span> {\n    <span class="hljs-keyword">this</span>.cssClass = <span class="hljs-keyword">this</span>.cssClass === RED_CELL ? BLUE_CELL : RED_CELL;\n    <span class="hljs-keyword">this</span>.refresh.next();\n  }\n\n  beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): <span class="hljs-built_in">void</span> {\n    body.forEach((day) =&gt; {\n      <span class="hljs-keyword">if</span> (day.date.getDate() % <span class="hljs-number">2</span> === <span class="hljs-number">1</span>) {\n        day.cssClass = <span class="hljs-keyword">this</span>.cssClass;\n      }\n    });\n  }\n}\n'},16211:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a='<span class="hljs-keyword">import</span> { NgModule } from <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { CommonModule } from <span class="hljs-string">\'@angular/common\'</span>;\n<span class="hljs-keyword">import</span> { RouterModule } from <span class="hljs-string">\'@angular/router\'</span>;\n<span class="hljs-keyword">import</span> { CalendarModule, DateAdapter } from <span class="hljs-string">\'angular-calendar\'</span>;\n<span class="hljs-keyword">import</span> { DemoUtilsModule } from <span class="hljs-string">\'../demo-utils/module\'</span>;\n<span class="hljs-keyword">import</span> { DemoComponent } from <span class="hljs-string">\'./component\'</span>;\n<span class="hljs-keyword">import</span> { adapterFactory } from <span class="hljs-string">\'angular-calendar/date-adapters/date-fns\'</span>;\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CalendarModule.forRoot({\n      provide: DateAdapter,\n      useFactory: adapterFactory,\n    }),\n    DemoUtilsModule,\n    RouterModule.forChild([{ path: <span class="hljs-string">\'\'</span>, component: DemoComponent }]),\n  ],\n  declarations: [DemoComponent],\n  exports: [DemoComponent],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DemoModule {}\n'},87568:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a='<span class="hljs-tag">&lt;<span class="hljs-title">mwl-demo-utils-calendar-header</span> [(<span class="hljs-attribute">view</span>)]=<span class="hljs-value">"view"</span> [(<span class="hljs-attribute">viewDate</span>)]=<span class="hljs-value">"viewDate"</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">mwl-demo-utils-calendar-header</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"text-center"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-primary"</span> (<span class="hljs-attribute">click</span>)=<span class="hljs-value">"refreshView()"</span>&gt;</span>\n    Refresh + re-render the current view\n  <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-title">div</span> [<span class="hljs-attribute">ngSwitch</span>]=<span class="hljs-value">"view"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">mwl-calendar-month-view</span>\n    *<span class="hljs-attribute">ngSwitchCase</span>=<span class="hljs-value">"\'month\'"</span>\n    [<span class="hljs-attribute">viewDate</span>]=<span class="hljs-value">"viewDate"</span>\n    [<span class="hljs-attribute">events</span>]=<span class="hljs-value">"events"</span>\n    [<span class="hljs-attribute">refresh</span>]=<span class="hljs-value">"refresh"</span>\n    (<span class="hljs-attribute">beforeViewRender</span>)=<span class="hljs-value">"beforeMonthViewRender($event)"</span>\n  &gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">mwl-calendar-month-view</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">mwl-calendar-week-view</span>\n    *<span class="hljs-attribute">ngSwitchCase</span>=<span class="hljs-value">"\'week\'"</span>\n    [<span class="hljs-attribute">viewDate</span>]=<span class="hljs-value">"viewDate"</span>\n    [<span class="hljs-attribute">events</span>]=<span class="hljs-value">"events"</span>\n    [<span class="hljs-attribute">refresh</span>]=<span class="hljs-value">"refresh"</span>\n  &gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">mwl-calendar-week-view</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">mwl-calendar-day-view</span>\n    *<span class="hljs-attribute">ngSwitchCase</span>=<span class="hljs-value">"\'day\'"</span>\n    [<span class="hljs-attribute">viewDate</span>]=<span class="hljs-value">"viewDate"</span>\n    [<span class="hljs-attribute">events</span>]=<span class="hljs-value">"events"</span>\n    [<span class="hljs-attribute">refresh</span>]=<span class="hljs-value">"refresh"</span>\n  &gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">mwl-calendar-day-view</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n'},64946:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a="import {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarMonthViewDay,\n  CalendarView,\n} from 'angular-calendar';\nimport { Subject } from 'rxjs';\n\nconst RED_CELL: 'red-cell' = 'red-cell';\nconst BLUE_CELL: 'blue-cell' = 'blue-cell';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'template.html',\n  styles: [\n    `\n      .red-cell {\n        background-color: red !important;\n      }\n      .blue-cell {\n        background-color: blue !important;\n      }\n    `,\n  ],\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate = new Date();\n\n  events: CalendarEvent[] = [];\n\n  refresh = new Subject<void>();\n\n  cssClass: string = RED_CELL;\n\n  refreshView(): void {\n    this.cssClass = this.cssClass === RED_CELL ? BLUE_CELL : RED_CELL;\n    this.refresh.next();\n  }\n\n  beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n    body.forEach((day) => {\n      if (day.date.getDate() % 2 === 1) {\n        day.cssClass = this.cssClass;\n      }\n    });\n  }\n}\n"},41818:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a="import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { DemoUtilsModule } from '../demo-utils/module';\nimport { DemoComponent } from './component';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CalendarModule.forRoot({\n      provide: DateAdapter,\n      useFactory: adapterFactory,\n    }),\n    DemoUtilsModule,\n    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n  ],\n  declarations: [DemoComponent],\n  exports: [DemoComponent],\n})\nexport class DemoModule {}\n"},50838:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a='<mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n</mwl-demo-utils-calendar-header>\n\n<div class="text-center">\n  <button class="btn btn-primary" (click)="refreshView()">\n    Refresh + re-render the current view\n  </button>\n</div>\n\n<div [ngSwitch]="view">\n  <mwl-calendar-month-view\n    *ngSwitchCase="\'month\'"\n    [viewDate]="viewDate"\n    [events]="events"\n    [refresh]="refresh"\n    (beforeViewRender)="beforeMonthViewRender($event)"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase="\'week\'"\n    [viewDate]="viewDate"\n    [events]="events"\n    [refresh]="refresh"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase="\'day\'"\n    [viewDate]="viewDate"\n    [events]="events"\n    [refresh]="refresh"\n  >\n  </mwl-calendar-day-view>\n</div>\n'}}]);