"use strict";(self.webpackChunkdemos=self.webpackChunkdemos||[]).push([[355],{90355:(e,n,s)=>{s.r(n),s.d(n,{sources:()=>a});const a=[{filename:"component.ts",contents:{raw:s(38604),highlighted:s(81950)}},{filename:"template.html",contents:{raw:s(49054),highlighted:s(66619)}},{filename:"day-view-scheduler.component.ts",contents:{raw:s(21929),highlighted:s(38095)}},{filename:"day-view-scheduler.component.html",contents:{raw:s(61669),highlighted:s(30411)}},{filename:"module.ts",contents:{raw:s(97200),highlighted:s(57754)}}]},81950:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a='<span class="hljs-keyword">import</span> { Component, ChangeDetectionStrategy } from <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> {\n  CalendarEvent,\n  CalendarEventTimesChangedEvent,\n} from <span class="hljs-string">\'angular-calendar\'</span>;\n<span class="hljs-keyword">import</span> { colors } from <span class="hljs-string">\'../demo-utils/colors\'</span>;\n<span class="hljs-keyword">import</span> { addHours, startOfDay } from <span class="hljs-string">\'date-fns\'</span>;\n<span class="hljs-keyword">import</span> { User } from <span class="hljs-string">\'./day-view-scheduler.component\'</span>;\n\n<span class="hljs-keyword">const</span> users: User[] = [\n  {\n    id: <span class="hljs-number">0</span>,\n    name: <span class="hljs-string">\'John smith\'</span>,\n    color: colors.yellow,\n  },\n  {\n    id: <span class="hljs-number">1</span>,\n    name: <span class="hljs-string">\'Jane Doe\'</span>,\n    color: colors.blue,\n  },\n];\n\n@Component({\n  selector: <span class="hljs-string">\'mwl-demo-component\'</span>,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: <span class="hljs-string">\'template.html\'</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DemoComponent {\n  viewDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();\n\n  users = users;\n\n  events: CalendarEvent[] = [\n    {\n      title: <span class="hljs-string">\'An event\'</span>,\n      color: users[<span class="hljs-number">0</span>].color,\n      start: addHours(startOfDay(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()), <span class="hljs-number">5</span>),\n      meta: {\n        user: users[<span class="hljs-number">0</span>],\n      },\n      resizable: {\n        beforeStart: <span class="hljs-literal">true</span>,\n        afterEnd: <span class="hljs-literal">true</span>,\n      },\n      draggable: <span class="hljs-literal">true</span>,\n    },\n    {\n      title: <span class="hljs-string">\'Another event\'</span>,\n      color: users[<span class="hljs-number">1</span>].color,\n      start: addHours(startOfDay(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()), <span class="hljs-number">2</span>),\n      meta: {\n        user: users[<span class="hljs-number">1</span>],\n      },\n      resizable: {\n        beforeStart: <span class="hljs-literal">true</span>,\n        afterEnd: <span class="hljs-literal">true</span>,\n      },\n      draggable: <span class="hljs-literal">true</span>,\n    },\n    {\n      title: <span class="hljs-string">\'A 3rd event\'</span>,\n      color: users[<span class="hljs-number">0</span>].color,\n      start: addHours(startOfDay(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()), <span class="hljs-number">7</span>),\n      meta: {\n        user: users[<span class="hljs-number">0</span>],\n      },\n      resizable: {\n        beforeStart: <span class="hljs-literal">true</span>,\n        afterEnd: <span class="hljs-literal">true</span>,\n      },\n      draggable: <span class="hljs-literal">true</span>,\n    },\n    {\n      title: <span class="hljs-string">\'An all day event\'</span>,\n      color: users[<span class="hljs-number">0</span>].color,\n      start: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(),\n      meta: {\n        user: users[<span class="hljs-number">0</span>],\n      },\n      draggable: <span class="hljs-literal">true</span>,\n      allDay: <span class="hljs-literal">true</span>,\n    },\n    {\n      title: <span class="hljs-string">\'Another all day event\'</span>,\n      color: users[<span class="hljs-number">1</span>].color,\n      start: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(),\n      meta: {\n        user: users[<span class="hljs-number">1</span>],\n      },\n      draggable: <span class="hljs-literal">true</span>,\n      allDay: <span class="hljs-literal">true</span>,\n    },\n    {\n      title: <span class="hljs-string">\'A 3rd all day event\'</span>,\n      color: users[<span class="hljs-number">0</span>].color,\n      start: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(),\n      meta: {\n        user: users[<span class="hljs-number">0</span>],\n      },\n      draggable: <span class="hljs-literal">true</span>,\n      allDay: <span class="hljs-literal">true</span>,\n    },\n  ];\n\n  eventTimesChanged({\n    event,\n    newStart,\n    newEnd,\n  }: CalendarEventTimesChangedEvent): <span class="hljs-built_in">void</span> {\n    event.start = newStart;\n    event.end = newEnd;\n    <span class="hljs-keyword">this</span>.events = [...this.events];\n  }\n\n  userChanged({ event, newUser }) {\n    event.color = newUser.color;\n    event.meta.user = newUser;\n    <span class="hljs-keyword">this</span>.events = [...this.events];\n  }\n}\n'},38095:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a='<span class="hljs-keyword">import</span> {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Injectable,\n  Input,\n  LOCALE_ID,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> {\n  CalendarUtils,\n  CalendarWeekViewComponent,\n  DateAdapter,\n  getWeekViewPeriod,\n} from <span class="hljs-string">\'angular-calendar\'</span>;\n<span class="hljs-keyword">import</span> {\n  WeekView,\n  GetWeekViewArgs,\n  WeekViewTimeEvent,\n  EventColor,\n  CalendarEvent,\n  WeekViewAllDayEventRow,\n  WeekViewAllDayEvent,\n} from <span class="hljs-string">\'calendar-utils\'</span>;\n<span class="hljs-keyword">import</span> { DragEndEvent, DragMoveEvent } from <span class="hljs-string">\'angular-draggable-droppable\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-interface"><span class="hljs-keyword">interface</span> User </span>{\n  id: <span class="hljs-built_in">number</span>;\n  name: <span class="hljs-built_in">string</span>;\n  color: EventColor;\n}\n\n<span class="hljs-interface"><span class="hljs-keyword">interface</span> DayViewScheduler <span class="hljs-keyword">extends</span> WeekView </span>{\n  users: User[];\n}\n\n<span class="hljs-interface"><span class="hljs-keyword">interface</span> GetWeekViewArgsWithUsers <span class="hljs-keyword">extends</span> GetWeekViewArgs </span>{\n  users: User[];\n}\n\n@Injectable()\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DayViewSchedulerCalendarUtils extends CalendarUtils {\n  getWeekView(args: GetWeekViewArgsWithUsers): DayViewScheduler {\n    <span class="hljs-keyword">const</span> { period } = <span class="hljs-keyword">super</span>.getWeekView(args);\n    <span class="hljs-keyword">const</span> view: DayViewScheduler = {\n      period,\n      allDayEventRows: [],\n      hourColumns: [],\n      users: [...args.users],\n    };\n\n    view.users.forEach((user, columnIndex) =&gt; {\n      <span class="hljs-keyword">const</span> events = args.events.filter(\n        (event) =&gt; event.meta.user.id === user.id\n      );\n      <span class="hljs-keyword">const</span> columnView = <span class="hljs-keyword">super</span>.getWeekView({\n        ...args,\n        events,\n      });\n      view.hourColumns.push(columnView.hourColumns[<span class="hljs-number">0</span>]);\n      columnView.allDayEventRows.forEach(({ row }, rowIndex) =&gt; {\n        view.allDayEventRows[rowIndex] = view.allDayEventRows[rowIndex] || {\n          row: [],\n        };\n        view.allDayEventRows[rowIndex].row.push({\n          ...row[<span class="hljs-number">0</span>],\n          offset: columnIndex,\n          span: <span class="hljs-number">1</span>,\n        });\n      });\n    });\n\n    <span class="hljs-keyword">return</span> view;\n  }\n}\n\n@Component({\n  selector: <span class="hljs-string">\'mwl-day-view-scheduler\'</span>,\n  templateUrl: <span class="hljs-string">\'day-view-scheduler.component.html\'</span>,\n  providers: [DayViewSchedulerCalendarUtils],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DayViewSchedulerComponent\n  extends CalendarWeekViewComponent\n  <span class="hljs-keyword">implements</span> OnChanges\n{\n  @Input() users: User[] = [];\n\n  @Output() userChanged = <span class="hljs-keyword">new</span> EventEmitter();\n\n  view: DayViewScheduler;\n\n  daysInWeek = <span class="hljs-number">1</span>;\n\n  <span class="hljs-constructor"><span class="hljs-keyword">constructor</span>(\n    protected cdr: ChangeDetectorRef,\n    protected utils: DayViewSchedulerCalendarUtils,\n    @Inject(LOCALE_ID) locale: string,\n    protected dateAdapter: DateAdapter,\n    protected element: ElementRef&lt;HTMLElement&gt;\n  ) </span>{\n    <span class="hljs-keyword">super</span>(cdr, utils, locale, dateAdapter, element);\n  }\n\n  trackByUserId = (index: <span class="hljs-built_in">number</span>, row: User) =&gt; row.id;\n\n  ngOnChanges(changes: SimpleChanges): <span class="hljs-built_in">void</span> {\n    <span class="hljs-keyword">super</span>.ngOnChanges(changes);\n\n    <span class="hljs-keyword">if</span> (changes.users) {\n      <span class="hljs-keyword">this</span>.refreshBody();\n      <span class="hljs-keyword">this</span>.emitBeforeViewRender();\n    }\n  }\n\n  getDayColumnWidth(eventRowContainer: HTMLElement): <span class="hljs-built_in">number</span> {\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(eventRowContainer.offsetWidth / <span class="hljs-keyword">this</span>.users.length);\n  }\n\n  dragMove(dayEvent: WeekViewTimeEvent, dragEvent: DragMoveEvent) {\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.snapDraggedEvents) {\n      <span class="hljs-keyword">const</span> newUser = <span class="hljs-keyword">this</span>.getDraggedUserColumn(dayEvent, dragEvent.x);\n      <span class="hljs-keyword">const</span> newEventTimes = <span class="hljs-keyword">this</span>.getDragMovedEventTimes(\n        dayEvent,\n        { ...dragEvent, x: <span class="hljs-number">0</span> },\n        <span class="hljs-keyword">this</span>.dayColumnWidth,\n        <span class="hljs-literal">true</span>\n      );\n      <span class="hljs-keyword">const</span> originalEvent = dayEvent.event;\n      <span class="hljs-keyword">const</span> adjustedEvent = {\n        ...originalEvent,\n        ...newEventTimes,\n        meta: { ...originalEvent.meta, user: newUser },\n      };\n      <span class="hljs-keyword">const</span> tempEvents = <span class="hljs-keyword">this</span>.events.map((event) =&gt; {\n        <span class="hljs-keyword">if</span> (event === originalEvent) {\n          <span class="hljs-keyword">return</span> adjustedEvent;\n        }\n        <span class="hljs-keyword">return</span> event;\n      });\n      <span class="hljs-keyword">this</span>.restoreOriginalEvents(\n        tempEvents,\n        <span class="hljs-keyword">new</span> Map([[adjustedEvent, originalEvent]])\n      );\n    }\n    <span class="hljs-keyword">this</span>.dragAlreadyMoved = <span class="hljs-literal">true</span>;\n  }\n\n  dragEnded(\n    weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent,\n    dragEndEvent: DragEndEvent,\n    dayWidth: <span class="hljs-built_in">number</span>,\n    useY = <span class="hljs-literal">false</span>\n  ) {\n    <span class="hljs-keyword">super</span>.dragEnded(\n      weekEvent,\n      {\n        ...dragEndEvent,\n        x: <span class="hljs-number">0</span>,\n      },\n      dayWidth,\n      useY\n    );\n    <span class="hljs-keyword">const</span> newUser = <span class="hljs-keyword">this</span>.getDraggedUserColumn(weekEvent, dragEndEvent.x);\n    <span class="hljs-keyword">if</span> (newUser &amp;&amp; newUser !== weekEvent.event.meta.user) {\n      <span class="hljs-keyword">this</span>.userChanged.emit({ event: weekEvent.event, newUser });\n    }\n  }\n\n  <span class="hljs-keyword">protected</span> getWeekView(events: CalendarEvent[]) {\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.utils.getWeekView({\n      events,\n      users: <span class="hljs-keyword">this</span>.users,\n      viewDate: <span class="hljs-keyword">this</span>.viewDate,\n      weekStartsOn: <span class="hljs-keyword">this</span>.weekStartsOn,\n      excluded: <span class="hljs-keyword">this</span>.excludeDays,\n      precision: <span class="hljs-keyword">this</span>.precision,\n      absolutePositionedEvents: <span class="hljs-literal">true</span>,\n      hourSegments: <span class="hljs-keyword">this</span>.hourSegments,\n      dayStart: {\n        hour: <span class="hljs-keyword">this</span>.dayStartHour,\n        minute: <span class="hljs-keyword">this</span>.dayStartMinute,\n      },\n      dayEnd: {\n        hour: <span class="hljs-keyword">this</span>.dayEndHour,\n        minute: <span class="hljs-keyword">this</span>.dayEndMinute,\n      },\n      segmentHeight: <span class="hljs-keyword">this</span>.hourSegmentHeight,\n      weekendDays: <span class="hljs-keyword">this</span>.weekendDays,\n      ...getWeekViewPeriod(\n        <span class="hljs-keyword">this</span>.dateAdapter,\n        <span class="hljs-keyword">this</span>.viewDate,\n        <span class="hljs-keyword">this</span>.weekStartsOn,\n        <span class="hljs-keyword">this</span>.excludeDays,\n        <span class="hljs-keyword">this</span>.daysInWeek\n      ),\n    });\n  }\n\n  <span class="hljs-keyword">private</span> getDraggedUserColumn(\n    dayEvent: WeekViewTimeEvent | WeekViewAllDayEvent,\n    xPixels: <span class="hljs-built_in">number</span>\n  ) {\n    <span class="hljs-keyword">const</span> columnsMoved = <span class="hljs-built_in">Math</span>.round(xPixels / <span class="hljs-keyword">this</span>.dayColumnWidth);\n    <span class="hljs-keyword">const</span> currentColumnIndex = <span class="hljs-keyword">this</span>.view.users.findIndex(\n      (user) =&gt; user === dayEvent.event.meta.user\n    );\n    <span class="hljs-keyword">const</span> newIndex = currentColumnIndex + columnsMoved;\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.view.users[newIndex];\n  }\n}\n'},57754:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a='<span class="hljs-keyword">import</span> { NgModule } from <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { CommonModule } from <span class="hljs-string">\'@angular/common\'</span>;\n<span class="hljs-keyword">import</span> { RouterModule } from <span class="hljs-string">\'@angular/router\'</span>;\n<span class="hljs-keyword">import</span> { CalendarModule, DateAdapter } from <span class="hljs-string">\'angular-calendar\'</span>;\n<span class="hljs-keyword">import</span> { adapterFactory } from <span class="hljs-string">\'angular-calendar/date-adapters/date-fns\'</span>;\n<span class="hljs-keyword">import</span> { DemoUtilsModule } from <span class="hljs-string">\'../demo-utils/module\'</span>;\n<span class="hljs-keyword">import</span> { DemoComponent } from <span class="hljs-string">\'./component\'</span>;\n<span class="hljs-keyword">import</span> { DayViewSchedulerComponent } from <span class="hljs-string">\'./day-view-scheduler.component\'</span>;\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CalendarModule.forRoot({\n      provide: DateAdapter,\n      useFactory: adapterFactory,\n    }),\n    DemoUtilsModule,\n    RouterModule.forChild([{ path: <span class="hljs-string">\'\'</span>, component: DemoComponent }]),\n  ],\n  declarations: [DemoComponent, DayViewSchedulerComponent],\n  exports: [DemoComponent],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DemoModule {}\n'},30411:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a='<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-week-view"</span> <span class="hljs-attribute">role</span>=<span class="hljs-value">"grid"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-day-headers"</span> <span class="hljs-attribute">role</span>=<span class="hljs-value">"row"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n      <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-header"</span>\n      *<span class="hljs-attribute">ngFor</span>=<span class="hljs-value">"let user of users; trackBy: trackByUserId"</span>\n      <span class="hljs-attribute">tabindex</span>=<span class="hljs-value">"0"</span>\n      <span class="hljs-attribute">role</span>=<span class="hljs-value">"columnheader"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-title">b</span>&gt;</span>{{ user.name }}<span class="hljs-tag">&lt;/<span class="hljs-title">b</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n    <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-all-day-events"</span>\n    #<span class="hljs-attribute">allDayEventsContainer</span>\n    *<span class="hljs-attribute">ngIf</span>=<span class="hljs-value">"view.allDayEventRows.length &gt; 0"</span>\n    <span class="hljs-attribute">mwlDroppable</span>\n    (<span class="hljs-attribute">dragEnter</span>)=<span class="hljs-value">"dragEnter(\'allDay\')"</span>\n    (<span class="hljs-attribute">dragLeave</span>)=<span class="hljs-value">"dragLeave(\'allDay\')"</span>\n  &gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-day-columns"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n        <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-time-label-column"</span>\n        [<span class="hljs-attribute">ngTemplateOutlet</span>]=<span class="hljs-value">"allDayEventsLabelTemplate"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n        <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-day-column"</span>\n        *<span class="hljs-attribute">ngFor</span>=<span class="hljs-value">"let day of days; trackBy: trackByWeekDayHeaderDate"</span>\n        <span class="hljs-attribute">mwlDroppable</span>\n        <span class="hljs-attribute">dragOverClass</span>=<span class="hljs-value">"cal-drag-over"</span>\n        (<span class="hljs-attribute">drop</span>)=<span class="hljs-value">"eventDropped($event, day.date, true)"</span>\n        (<span class="hljs-attribute">dragEnter</span>)=<span class="hljs-value">"dateDragEnter(day.date)"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n      *<span class="hljs-attribute">ngFor</span>=<span class="hljs-value">"let eventRow of view.allDayEventRows; trackBy: trackById"</span>\n      #<span class="hljs-attribute">eventRowContainer</span>\n      <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-events-row"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n        *<span class="hljs-attribute">ngFor</span>=<span class="hljs-value">"\n          let allDayEvent of eventRow.row;\n          trackBy: trackByWeekAllDayEvent\n        "</span>\n        #<span class="hljs-attribute">event</span>\n        <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-event-container"</span>\n        [<span class="hljs-attribute">class.cal-draggable</span>]=<span class="hljs-value">"\n          allDayEvent.event.draggable &amp;&amp; allDayEventResizes.size === 0\n        "</span>\n        [<span class="hljs-attribute">class.cal-starts-within-week</span>]=<span class="hljs-value">"!allDayEvent.startsBeforeWeek"</span>\n        [<span class="hljs-attribute">class.cal-ends-within-week</span>]=<span class="hljs-value">"!allDayEvent.endsAfterWeek"</span>\n        [<span class="hljs-attribute">ngClass</span>]=<span class="hljs-value">"allDayEvent.event?.cssClass"</span>\n        [<span class="hljs-attribute">style.width.</span>%]=<span class="hljs-value">"(100 / users.length) * allDayEvent.span"</span>\n        [<span class="hljs-attribute">style.marginLeft.</span>%]=<span class="hljs-value">"(100 / users.length) * allDayEvent.offset"</span>\n        <span class="hljs-attribute">mwlDraggable</span>\n        <span class="hljs-attribute">dragActiveClass</span>=<span class="hljs-value">"cal-drag-active"</span>\n        [<span class="hljs-attribute">dropData</span>]=<span class="hljs-value">"{ event: allDayEvent.event, calendarId: calendarId }"</span>\n        [<span class="hljs-attribute">dragAxis</span>]=<span class="hljs-value">"{\n          x: allDayEvent.event.draggable &amp;&amp; allDayEventResizes.size === 0,\n          y:\n            !snapDraggedEvents &amp;&amp;\n            allDayEvent.event.draggable &amp;&amp;\n            allDayEventResizes.size === 0\n        }"</span>\n        [<span class="hljs-attribute">dragSnapGrid</span>]=<span class="hljs-value">"snapDraggedEvents ? { x: dayColumnWidth } : {}"</span>\n        [<span class="hljs-attribute">validateDrag</span>]=<span class="hljs-value">"validateDrag"</span>\n        (<span class="hljs-attribute">dragStart</span>)=<span class="hljs-value">"dragStarted(eventRowContainer, event, allDayEvent, false)"</span>\n        (<span class="hljs-attribute">dragging</span>)=<span class="hljs-value">"allDayEventDragMove()"</span>\n        (<span class="hljs-attribute">dragEnd</span>)=<span class="hljs-value">"dragEnded(allDayEvent, $event, dayColumnWidth)"</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-title">mwl-calendar-week-view-event</span>\n          [<span class="hljs-attribute">locale</span>]=<span class="hljs-value">"locale"</span>\n          [<span class="hljs-attribute">weekEvent</span>]=<span class="hljs-value">"allDayEvent"</span>\n          [<span class="hljs-attribute">tooltipPlacement</span>]=<span class="hljs-value">"tooltipPlacement"</span>\n          [<span class="hljs-attribute">tooltipTemplate</span>]=<span class="hljs-value">"tooltipTemplate"</span>\n          [<span class="hljs-attribute">tooltipAppendToBody</span>]=<span class="hljs-value">"tooltipAppendToBody"</span>\n          [<span class="hljs-attribute">tooltipDelay</span>]=<span class="hljs-value">"tooltipDelay"</span>\n          [<span class="hljs-attribute">customTemplate</span>]=<span class="hljs-value">"eventTemplate"</span>\n          [<span class="hljs-attribute">eventTitleTemplate</span>]=<span class="hljs-value">"eventTitleTemplate"</span>\n          [<span class="hljs-attribute">eventActionsTemplate</span>]=<span class="hljs-value">"eventActionsTemplate"</span>\n          [<span class="hljs-attribute">daysInWeek</span>]=<span class="hljs-value">"daysInWeek"</span>\n          (<span class="hljs-attribute">eventClicked</span>)=<span class="hljs-value">"\n            eventClicked.emit({\n              event: allDayEvent.event,\n              sourceEvent: $event.sourceEvent\n            })\n          "</span>\n        &gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-title">mwl-calendar-week-view-event</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n    <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-time-events"</span>\n    <span class="hljs-attribute">mwlDroppable</span>\n    (<span class="hljs-attribute">dragEnter</span>)=<span class="hljs-value">"dragEnter(\'time\')"</span>\n    (<span class="hljs-attribute">dragLeave</span>)=<span class="hljs-value">"dragLeave(\'time\')"</span>\n  &gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-time-label-column"</span> *<span class="hljs-attribute">ngIf</span>=<span class="hljs-value">"view.hourColumns.length &gt; 0"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n        *<span class="hljs-attribute">ngFor</span>=<span class="hljs-value">"\n          let hour of view.hourColumns[0].hours;\n          trackBy: trackByHour;\n          let odd = odd\n        "</span>\n        <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-hour"</span>\n        [<span class="hljs-attribute">class.cal-hour-odd</span>]=<span class="hljs-value">"odd"</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-title">mwl-calendar-week-view-hour-segment</span>\n          *<span class="hljs-attribute">ngFor</span>=<span class="hljs-value">"let segment of hour.segments; trackBy: trackByHourSegment"</span>\n          [<span class="hljs-attribute">style.height.px</span>]=<span class="hljs-value">"hourSegmentHeight"</span>\n          [<span class="hljs-attribute">segment</span>]=<span class="hljs-value">"segment"</span>\n          [<span class="hljs-attribute">segmentHeight</span>]=<span class="hljs-value">"hourSegmentHeight"</span>\n          [<span class="hljs-attribute">locale</span>]=<span class="hljs-value">"locale"</span>\n          [<span class="hljs-attribute">customTemplate</span>]=<span class="hljs-value">"hourSegmentTemplate"</span>\n          [<span class="hljs-attribute">isTimeLabel</span>]=<span class="hljs-value">"true"</span>\n        &gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-title">mwl-calendar-week-view-hour-segment</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n      <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-day-columns"</span>\n      [<span class="hljs-attribute">class.cal-resize-active</span>]=<span class="hljs-value">"timeEventResizes.size &gt; 0"</span>\n      #<span class="hljs-attribute">dayColumns</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n        <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-day-column"</span>\n        *<span class="hljs-attribute">ngFor</span>=<span class="hljs-value">"let column of view.hourColumns; trackBy: trackByHourColumn"</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-title">mwl-calendar-week-view-current-time-marker</span>\n          [<span class="hljs-attribute">columnDate</span>]=<span class="hljs-value">"column.date"</span>\n          [<span class="hljs-attribute">dayStartHour</span>]=<span class="hljs-value">"dayStartHour"</span>\n          [<span class="hljs-attribute">dayStartMinute</span>]=<span class="hljs-value">"dayStartMinute"</span>\n          [<span class="hljs-attribute">dayEndHour</span>]=<span class="hljs-value">"dayEndHour"</span>\n          [<span class="hljs-attribute">dayEndMinute</span>]=<span class="hljs-value">"dayEndMinute"</span>\n          [<span class="hljs-attribute">hourSegments</span>]=<span class="hljs-value">"hourSegments"</span>\n          [<span class="hljs-attribute">hourSegmentHeight</span>]=<span class="hljs-value">"hourSegmentHeight"</span>\n          [<span class="hljs-attribute">customTemplate</span>]=<span class="hljs-value">"currentTimeMarkerTemplate"</span>\n        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">mwl-calendar-week-view-current-time-marker</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n          *<span class="hljs-attribute">ngFor</span>=<span class="hljs-value">"let timeEvent of column.events; trackBy: trackByWeekTimeEvent"</span>\n          #<span class="hljs-attribute">event</span>\n          <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-event-container"</span>\n          [<span class="hljs-attribute">class.cal-draggable</span>]=<span class="hljs-value">"\n            timeEvent.event.draggable &amp;&amp; timeEventResizes.size === 0\n          "</span>\n          [<span class="hljs-attribute">class.cal-starts-within-day</span>]=<span class="hljs-value">"!timeEvent.startsBeforeDay"</span>\n          [<span class="hljs-attribute">class.cal-ends-within-day</span>]=<span class="hljs-value">"!timeEvent.endsAfterDay"</span>\n          [<span class="hljs-attribute">ngClass</span>]=<span class="hljs-value">"timeEvent.event.cssClass"</span>\n          [<span class="hljs-attribute">hidden</span>]=<span class="hljs-value">"timeEvent.height === 0 &amp;&amp; timeEvent.width === 0"</span>\n          [<span class="hljs-attribute">style.top.px</span>]=<span class="hljs-value">"timeEvent.top"</span>\n          [<span class="hljs-attribute">style.height.px</span>]=<span class="hljs-value">"timeEvent.height"</span>\n          [<span class="hljs-attribute">style.left.</span>%]=<span class="hljs-value">"timeEvent.left"</span>\n          [<span class="hljs-attribute">style.width.</span>%]=<span class="hljs-value">"timeEvent.width"</span>\n          <span class="hljs-attribute">mwlResizable</span>\n          [<span class="hljs-attribute">resizeSnapGrid</span>]=<span class="hljs-value">"{\n            left: dayColumnWidth,\n            right: dayColumnWidth,\n            top: eventSnapSize || hourSegmentHeight,\n            bottom: eventSnapSize || hourSegmentHeight\n          }"</span>\n          [<span class="hljs-attribute">validateResize</span>]=<span class="hljs-value">"validateResize"</span>\n          [<span class="hljs-attribute">allowNegativeResizes</span>]=<span class="hljs-value">"true"</span>\n          (<span class="hljs-attribute">resizeStart</span>)=<span class="hljs-value">"timeEventResizeStarted(dayColumns, timeEvent, $event)"</span>\n          (<span class="hljs-attribute">resizing</span>)=<span class="hljs-value">"timeEventResizing(timeEvent, $event)"</span>\n          (<span class="hljs-attribute">resizeEnd</span>)=<span class="hljs-value">"timeEventResizeEnded(timeEvent)"</span>\n          <span class="hljs-attribute">mwlDraggable</span>\n          <span class="hljs-attribute">dragActiveClass</span>=<span class="hljs-value">"cal-drag-active"</span>\n          [<span class="hljs-attribute">dropData</span>]=<span class="hljs-value">"{ event: timeEvent.event, calendarId: calendarId }"</span>\n          [<span class="hljs-attribute">dragAxis</span>]=<span class="hljs-value">"{\n            x: timeEvent.event.draggable &amp;&amp; timeEventResizes.size === 0,\n            y: timeEvent.event.draggable &amp;&amp; timeEventResizes.size === 0\n          }"</span>\n          [<span class="hljs-attribute">dragSnapGrid</span>]=<span class="hljs-value">"\n            snapDraggedEvents\n              ? { x: dayColumnWidth, y: eventSnapSize || hourSegmentHeight }\n              : {}\n          "</span>\n          [<span class="hljs-attribute">ghostDragEnabled</span>]=<span class="hljs-value">"!snapDraggedEvents"</span>\n          [<span class="hljs-attribute">validateDrag</span>]=<span class="hljs-value">"validateDrag"</span>\n          (<span class="hljs-attribute">dragStart</span>)=<span class="hljs-value">"dragStarted(dayColumns, event, timeEvent, true)"</span>\n          (<span class="hljs-attribute">dragging</span>)=<span class="hljs-value">"dragMove(timeEvent, $event)"</span>\n          (<span class="hljs-attribute">dragEnd</span>)=<span class="hljs-value">"dragEnded(timeEvent, $event, dayColumnWidth, true)"</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n            <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-resize-handle cal-resize-handle-before-start"</span>\n            *<span class="hljs-attribute">ngIf</span>=<span class="hljs-value">"\n              timeEvent.event?.resizable?.beforeStart &amp;&amp;\n              !timeEvent.startsBeforeDay\n            "</span>\n            <span class="hljs-attribute">mwlResizeHandle</span>\n            [<span class="hljs-attribute">resizeEdges</span>]=<span class="hljs-value">"{\n              left: true,\n              top: true\n            }"</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-title">mwl-calendar-week-view-event</span>\n            [<span class="hljs-attribute">locale</span>]=<span class="hljs-value">"locale"</span>\n            [<span class="hljs-attribute">weekEvent</span>]=<span class="hljs-value">"timeEvent"</span>\n            [<span class="hljs-attribute">tooltipPlacement</span>]=<span class="hljs-value">"tooltipPlacement"</span>\n            [<span class="hljs-attribute">tooltipTemplate</span>]=<span class="hljs-value">"tooltipTemplate"</span>\n            [<span class="hljs-attribute">tooltipAppendToBody</span>]=<span class="hljs-value">"tooltipAppendToBody"</span>\n            [<span class="hljs-attribute">tooltipDisabled</span>]=<span class="hljs-value">"dragActive || timeEventResizes.size &gt; 0"</span>\n            [<span class="hljs-attribute">tooltipDelay</span>]=<span class="hljs-value">"tooltipDelay"</span>\n            [<span class="hljs-attribute">customTemplate</span>]=<span class="hljs-value">"eventTemplate"</span>\n            [<span class="hljs-attribute">eventTitleTemplate</span>]=<span class="hljs-value">"eventTitleTemplate"</span>\n            [<span class="hljs-attribute">eventActionsTemplate</span>]=<span class="hljs-value">"eventActionsTemplate"</span>\n            [<span class="hljs-attribute">column</span>]=<span class="hljs-value">"column"</span>\n            (<span class="hljs-attribute">eventClicked</span>)=<span class="hljs-value">"\n              eventClicked.emit({\n                event: timeEvent.event,\n                sourceEvent: $event.sourceEvent\n              })\n            "</span>\n          &gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-title">mwl-calendar-week-view-event</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n            <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-resize-handle cal-resize-handle-after-end"</span>\n            *<span class="hljs-attribute">ngIf</span>=<span class="hljs-value">"\n              timeEvent.event?.resizable?.afterEnd &amp;&amp; !timeEvent.endsAfterDay\n            "</span>\n            <span class="hljs-attribute">mwlResizeHandle</span>\n            [<span class="hljs-attribute">resizeEdges</span>]=<span class="hljs-value">"{\n              right: true,\n              bottom: true\n            }"</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n          *<span class="hljs-attribute">ngFor</span>=<span class="hljs-value">"let hour of column.hours; trackBy: trackByHour; let odd = odd"</span>\n          <span class="hljs-attribute">class</span>=<span class="hljs-value">"cal-hour"</span>\n          [<span class="hljs-attribute">class.cal-hour-odd</span>]=<span class="hljs-value">"odd"</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-title">mwl-calendar-week-view-hour-segment</span>\n            *<span class="hljs-attribute">ngFor</span>=<span class="hljs-value">"let segment of hour.segments; trackBy: trackByHourSegment"</span>\n            [<span class="hljs-attribute">style.height.px</span>]=<span class="hljs-value">"hourSegmentHeight"</span>\n            [<span class="hljs-attribute">segment</span>]=<span class="hljs-value">"segment"</span>\n            [<span class="hljs-attribute">segmentHeight</span>]=<span class="hljs-value">"hourSegmentHeight"</span>\n            [<span class="hljs-attribute">locale</span>]=<span class="hljs-value">"locale"</span>\n            [<span class="hljs-attribute">customTemplate</span>]=<span class="hljs-value">"hourSegmentTemplate"</span>\n            (<span class="hljs-attribute">mwlClick</span>)=<span class="hljs-value">"\n              hourSegmentClicked.emit({\n                date: segment.date,\n                sourceEvent: $event\n              })\n            "</span>\n            [<span class="hljs-attribute">clickListenerDisabled</span>]=<span class="hljs-value">"hourSegmentClicked.observers.length === 0"</span>\n            <span class="hljs-attribute">mwlDroppable</span>\n            [<span class="hljs-attribute">dragOverClass</span>]=<span class="hljs-value">"\n              !dragActive || !snapDraggedEvents ? \'cal-drag-over\' : null\n            "</span>\n            <span class="hljs-attribute">dragActiveClass</span>=<span class="hljs-value">"cal-drag-active"</span>\n            (<span class="hljs-attribute">drop</span>)=<span class="hljs-value">"eventDropped($event, segment.date, false)"</span>\n          &gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-title">mwl-calendar-week-view-hour-segment</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n'},66619:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a='<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-6"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn-group"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n        <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-primary"</span>\n        <span class="hljs-attribute">mwlCalendarPreviousView</span>\n        [<span class="hljs-attribute">view</span>]=<span class="hljs-value">"\'day\'"</span>\n        [(<span class="hljs-attribute">viewDate</span>)]=<span class="hljs-value">"viewDate"</span>\n      &gt;</span>\n        Previous\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n        <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-outline-secondary"</span>\n        <span class="hljs-attribute">mwlCalendarToday</span>\n        [(<span class="hljs-attribute">viewDate</span>)]=<span class="hljs-value">"viewDate"</span>\n      &gt;</span>\n        Today\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span>\n        <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-primary"</span>\n        <span class="hljs-attribute">mwlCalendarNextView</span>\n        [<span class="hljs-attribute">view</span>]=<span class="hljs-value">"\'day\'"</span>\n        [(<span class="hljs-attribute">viewDate</span>)]=<span class="hljs-value">"viewDate"</span>\n      &gt;</span>\n        Next\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-6 text-right"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span>{{ viewDate | calendarDate:(\'dayViewTitle\') }}<span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-title">br</span> /&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-title">mwl-day-view-scheduler</span>\n  [<span class="hljs-attribute">viewDate</span>]=<span class="hljs-value">"viewDate"</span>\n  [<span class="hljs-attribute">events</span>]=<span class="hljs-value">"events"</span>\n  [<span class="hljs-attribute">users</span>]=<span class="hljs-value">"users"</span>\n  (<span class="hljs-attribute">eventTimesChanged</span>)=<span class="hljs-value">"eventTimesChanged($event)"</span>\n  (<span class="hljs-attribute">userChanged</span>)=<span class="hljs-value">"userChanged($event)"</span>\n&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">mwl-day-view-scheduler</span>&gt;</span>\n'},38604:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a="import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarEventTimesChangedEvent,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport { addHours, startOfDay } from 'date-fns';\nimport { User } from './day-view-scheduler.component';\n\nconst users: User[] = [\n  {\n    id: 0,\n    name: 'John smith',\n    color: colors.yellow,\n  },\n  {\n    id: 1,\n    name: 'Jane Doe',\n    color: colors.blue,\n  },\n];\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  viewDate = new Date();\n\n  users = users;\n\n  events: CalendarEvent[] = [\n    {\n      title: 'An event',\n      color: users[0].color,\n      start: addHours(startOfDay(new Date()), 5),\n      meta: {\n        user: users[0],\n      },\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n    {\n      title: 'Another event',\n      color: users[1].color,\n      start: addHours(startOfDay(new Date()), 2),\n      meta: {\n        user: users[1],\n      },\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n    {\n      title: 'A 3rd event',\n      color: users[0].color,\n      start: addHours(startOfDay(new Date()), 7),\n      meta: {\n        user: users[0],\n      },\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n    {\n      title: 'An all day event',\n      color: users[0].color,\n      start: new Date(),\n      meta: {\n        user: users[0],\n      },\n      draggable: true,\n      allDay: true,\n    },\n    {\n      title: 'Another all day event',\n      color: users[1].color,\n      start: new Date(),\n      meta: {\n        user: users[1],\n      },\n      draggable: true,\n      allDay: true,\n    },\n    {\n      title: 'A 3rd all day event',\n      color: users[0].color,\n      start: new Date(),\n      meta: {\n        user: users[0],\n      },\n      draggable: true,\n      allDay: true,\n    },\n  ];\n\n  eventTimesChanged({\n    event,\n    newStart,\n    newEnd,\n  }: CalendarEventTimesChangedEvent): void {\n    event.start = newStart;\n    event.end = newEnd;\n    this.events = [...this.events];\n  }\n\n  userChanged({ event, newUser }) {\n    event.color = newUser.color;\n    event.meta.user = newUser;\n    this.events = [...this.events];\n  }\n}\n"},61669:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a='<div class="cal-week-view" role="grid">\n  <div class="cal-day-headers" role="row">\n    <div\n      class="cal-header"\n      *ngFor="let user of users; trackBy: trackByUserId"\n      tabindex="0"\n      role="columnheader"\n    >\n      <b>{{ user.name }}</b>\n    </div>\n  </div>\n  <div\n    class="cal-all-day-events"\n    #allDayEventsContainer\n    *ngIf="view.allDayEventRows.length > 0"\n    mwlDroppable\n    (dragEnter)="dragEnter(\'allDay\')"\n    (dragLeave)="dragLeave(\'allDay\')"\n  >\n    <div class="cal-day-columns">\n      <div\n        class="cal-time-label-column"\n        [ngTemplateOutlet]="allDayEventsLabelTemplate"\n      ></div>\n      <div\n        class="cal-day-column"\n        *ngFor="let day of days; trackBy: trackByWeekDayHeaderDate"\n        mwlDroppable\n        dragOverClass="cal-drag-over"\n        (drop)="eventDropped($event, day.date, true)"\n        (dragEnter)="dateDragEnter(day.date)"\n      ></div>\n    </div>\n    <div\n      *ngFor="let eventRow of view.allDayEventRows; trackBy: trackById"\n      #eventRowContainer\n      class="cal-events-row"\n    >\n      <div\n        *ngFor="\n          let allDayEvent of eventRow.row;\n          trackBy: trackByWeekAllDayEvent\n        "\n        #event\n        class="cal-event-container"\n        [class.cal-draggable]="\n          allDayEvent.event.draggable && allDayEventResizes.size === 0\n        "\n        [class.cal-starts-within-week]="!allDayEvent.startsBeforeWeek"\n        [class.cal-ends-within-week]="!allDayEvent.endsAfterWeek"\n        [ngClass]="allDayEvent.event?.cssClass"\n        [style.width.%]="(100 / users.length) * allDayEvent.span"\n        [style.marginLeft.%]="(100 / users.length) * allDayEvent.offset"\n        mwlDraggable\n        dragActiveClass="cal-drag-active"\n        [dropData]="{ event: allDayEvent.event, calendarId: calendarId }"\n        [dragAxis]="{\n          x: allDayEvent.event.draggable && allDayEventResizes.size === 0,\n          y:\n            !snapDraggedEvents &&\n            allDayEvent.event.draggable &&\n            allDayEventResizes.size === 0\n        }"\n        [dragSnapGrid]="snapDraggedEvents ? { x: dayColumnWidth } : {}"\n        [validateDrag]="validateDrag"\n        (dragStart)="dragStarted(eventRowContainer, event, allDayEvent, false)"\n        (dragging)="allDayEventDragMove()"\n        (dragEnd)="dragEnded(allDayEvent, $event, dayColumnWidth)"\n      >\n        <mwl-calendar-week-view-event\n          [locale]="locale"\n          [weekEvent]="allDayEvent"\n          [tooltipPlacement]="tooltipPlacement"\n          [tooltipTemplate]="tooltipTemplate"\n          [tooltipAppendToBody]="tooltipAppendToBody"\n          [tooltipDelay]="tooltipDelay"\n          [customTemplate]="eventTemplate"\n          [eventTitleTemplate]="eventTitleTemplate"\n          [eventActionsTemplate]="eventActionsTemplate"\n          [daysInWeek]="daysInWeek"\n          (eventClicked)="\n            eventClicked.emit({\n              event: allDayEvent.event,\n              sourceEvent: $event.sourceEvent\n            })\n          "\n        >\n        </mwl-calendar-week-view-event>\n      </div>\n    </div>\n  </div>\n  <div\n    class="cal-time-events"\n    mwlDroppable\n    (dragEnter)="dragEnter(\'time\')"\n    (dragLeave)="dragLeave(\'time\')"\n  >\n    <div class="cal-time-label-column" *ngIf="view.hourColumns.length > 0">\n      <div\n        *ngFor="\n          let hour of view.hourColumns[0].hours;\n          trackBy: trackByHour;\n          let odd = odd\n        "\n        class="cal-hour"\n        [class.cal-hour-odd]="odd"\n      >\n        <mwl-calendar-week-view-hour-segment\n          *ngFor="let segment of hour.segments; trackBy: trackByHourSegment"\n          [style.height.px]="hourSegmentHeight"\n          [segment]="segment"\n          [segmentHeight]="hourSegmentHeight"\n          [locale]="locale"\n          [customTemplate]="hourSegmentTemplate"\n          [isTimeLabel]="true"\n        >\n        </mwl-calendar-week-view-hour-segment>\n      </div>\n    </div>\n    <div\n      class="cal-day-columns"\n      [class.cal-resize-active]="timeEventResizes.size > 0"\n      #dayColumns\n    >\n      <div\n        class="cal-day-column"\n        *ngFor="let column of view.hourColumns; trackBy: trackByHourColumn"\n      >\n        <mwl-calendar-week-view-current-time-marker\n          [columnDate]="column.date"\n          [dayStartHour]="dayStartHour"\n          [dayStartMinute]="dayStartMinute"\n          [dayEndHour]="dayEndHour"\n          [dayEndMinute]="dayEndMinute"\n          [hourSegments]="hourSegments"\n          [hourSegmentHeight]="hourSegmentHeight"\n          [customTemplate]="currentTimeMarkerTemplate"\n        ></mwl-calendar-week-view-current-time-marker>\n        <div\n          *ngFor="let timeEvent of column.events; trackBy: trackByWeekTimeEvent"\n          #event\n          class="cal-event-container"\n          [class.cal-draggable]="\n            timeEvent.event.draggable && timeEventResizes.size === 0\n          "\n          [class.cal-starts-within-day]="!timeEvent.startsBeforeDay"\n          [class.cal-ends-within-day]="!timeEvent.endsAfterDay"\n          [ngClass]="timeEvent.event.cssClass"\n          [hidden]="timeEvent.height === 0 && timeEvent.width === 0"\n          [style.top.px]="timeEvent.top"\n          [style.height.px]="timeEvent.height"\n          [style.left.%]="timeEvent.left"\n          [style.width.%]="timeEvent.width"\n          mwlResizable\n          [resizeSnapGrid]="{\n            left: dayColumnWidth,\n            right: dayColumnWidth,\n            top: eventSnapSize || hourSegmentHeight,\n            bottom: eventSnapSize || hourSegmentHeight\n          }"\n          [validateResize]="validateResize"\n          [allowNegativeResizes]="true"\n          (resizeStart)="timeEventResizeStarted(dayColumns, timeEvent, $event)"\n          (resizing)="timeEventResizing(timeEvent, $event)"\n          (resizeEnd)="timeEventResizeEnded(timeEvent)"\n          mwlDraggable\n          dragActiveClass="cal-drag-active"\n          [dropData]="{ event: timeEvent.event, calendarId: calendarId }"\n          [dragAxis]="{\n            x: timeEvent.event.draggable && timeEventResizes.size === 0,\n            y: timeEvent.event.draggable && timeEventResizes.size === 0\n          }"\n          [dragSnapGrid]="\n            snapDraggedEvents\n              ? { x: dayColumnWidth, y: eventSnapSize || hourSegmentHeight }\n              : {}\n          "\n          [ghostDragEnabled]="!snapDraggedEvents"\n          [validateDrag]="validateDrag"\n          (dragStart)="dragStarted(dayColumns, event, timeEvent, true)"\n          (dragging)="dragMove(timeEvent, $event)"\n          (dragEnd)="dragEnded(timeEvent, $event, dayColumnWidth, true)"\n        >\n          <div\n            class="cal-resize-handle cal-resize-handle-before-start"\n            *ngIf="\n              timeEvent.event?.resizable?.beforeStart &&\n              !timeEvent.startsBeforeDay\n            "\n            mwlResizeHandle\n            [resizeEdges]="{\n              left: true,\n              top: true\n            }"\n          ></div>\n          <mwl-calendar-week-view-event\n            [locale]="locale"\n            [weekEvent]="timeEvent"\n            [tooltipPlacement]="tooltipPlacement"\n            [tooltipTemplate]="tooltipTemplate"\n            [tooltipAppendToBody]="tooltipAppendToBody"\n            [tooltipDisabled]="dragActive || timeEventResizes.size > 0"\n            [tooltipDelay]="tooltipDelay"\n            [customTemplate]="eventTemplate"\n            [eventTitleTemplate]="eventTitleTemplate"\n            [eventActionsTemplate]="eventActionsTemplate"\n            [column]="column"\n            (eventClicked)="\n              eventClicked.emit({\n                event: timeEvent.event,\n                sourceEvent: $event.sourceEvent\n              })\n            "\n          >\n          </mwl-calendar-week-view-event>\n          <div\n            class="cal-resize-handle cal-resize-handle-after-end"\n            *ngIf="\n              timeEvent.event?.resizable?.afterEnd && !timeEvent.endsAfterDay\n            "\n            mwlResizeHandle\n            [resizeEdges]="{\n              right: true,\n              bottom: true\n            }"\n          ></div>\n        </div>\n\n        <div\n          *ngFor="let hour of column.hours; trackBy: trackByHour; let odd = odd"\n          class="cal-hour"\n          [class.cal-hour-odd]="odd"\n        >\n          <mwl-calendar-week-view-hour-segment\n            *ngFor="let segment of hour.segments; trackBy: trackByHourSegment"\n            [style.height.px]="hourSegmentHeight"\n            [segment]="segment"\n            [segmentHeight]="hourSegmentHeight"\n            [locale]="locale"\n            [customTemplate]="hourSegmentTemplate"\n            (mwlClick)="\n              hourSegmentClicked.emit({\n                date: segment.date,\n                sourceEvent: $event\n              })\n            "\n            [clickListenerDisabled]="hourSegmentClicked.observers.length === 0"\n            mwlDroppable\n            [dragOverClass]="\n              !dragActive || !snapDraggedEvents ? \'cal-drag-over\' : null\n            "\n            dragActiveClass="cal-drag-active"\n            (drop)="eventDropped($event, segment.date, false)"\n          >\n          </mwl-calendar-week-view-hour-segment>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'},21929:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a="import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Injectable,\n  Input,\n  LOCALE_ID,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  CalendarUtils,\n  CalendarWeekViewComponent,\n  DateAdapter,\n  getWeekViewPeriod,\n} from 'angular-calendar';\nimport {\n  WeekView,\n  GetWeekViewArgs,\n  WeekViewTimeEvent,\n  EventColor,\n  CalendarEvent,\n  WeekViewAllDayEventRow,\n  WeekViewAllDayEvent,\n} from 'calendar-utils';\nimport { DragEndEvent, DragMoveEvent } from 'angular-draggable-droppable';\n\nexport interface User {\n  id: number;\n  name: string;\n  color: EventColor;\n}\n\ninterface DayViewScheduler extends WeekView {\n  users: User[];\n}\n\ninterface GetWeekViewArgsWithUsers extends GetWeekViewArgs {\n  users: User[];\n}\n\n@Injectable()\nexport class DayViewSchedulerCalendarUtils extends CalendarUtils {\n  getWeekView(args: GetWeekViewArgsWithUsers): DayViewScheduler {\n    const { period } = super.getWeekView(args);\n    const view: DayViewScheduler = {\n      period,\n      allDayEventRows: [],\n      hourColumns: [],\n      users: [...args.users],\n    };\n\n    view.users.forEach((user, columnIndex) => {\n      const events = args.events.filter(\n        (event) => event.meta.user.id === user.id\n      );\n      const columnView = super.getWeekView({\n        ...args,\n        events,\n      });\n      view.hourColumns.push(columnView.hourColumns[0]);\n      columnView.allDayEventRows.forEach(({ row }, rowIndex) => {\n        view.allDayEventRows[rowIndex] = view.allDayEventRows[rowIndex] || {\n          row: [],\n        };\n        view.allDayEventRows[rowIndex].row.push({\n          ...row[0],\n          offset: columnIndex,\n          span: 1,\n        });\n      });\n    });\n\n    return view;\n  }\n}\n\n@Component({\n  selector: 'mwl-day-view-scheduler',\n  templateUrl: 'day-view-scheduler.component.html',\n  providers: [DayViewSchedulerCalendarUtils],\n})\nexport class DayViewSchedulerComponent\n  extends CalendarWeekViewComponent\n  implements OnChanges\n{\n  @Input() users: User[] = [];\n\n  @Output() userChanged = new EventEmitter();\n\n  view: DayViewScheduler;\n\n  daysInWeek = 1;\n\n  constructor(\n    protected cdr: ChangeDetectorRef,\n    protected utils: DayViewSchedulerCalendarUtils,\n    @Inject(LOCALE_ID) locale: string,\n    protected dateAdapter: DateAdapter,\n    protected element: ElementRef<HTMLElement>\n  ) {\n    super(cdr, utils, locale, dateAdapter, element);\n  }\n\n  trackByUserId = (index: number, row: User) => row.id;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n\n    if (changes.users) {\n      this.refreshBody();\n      this.emitBeforeViewRender();\n    }\n  }\n\n  getDayColumnWidth(eventRowContainer: HTMLElement): number {\n    return Math.floor(eventRowContainer.offsetWidth / this.users.length);\n  }\n\n  dragMove(dayEvent: WeekViewTimeEvent, dragEvent: DragMoveEvent) {\n    if (this.snapDraggedEvents) {\n      const newUser = this.getDraggedUserColumn(dayEvent, dragEvent.x);\n      const newEventTimes = this.getDragMovedEventTimes(\n        dayEvent,\n        { ...dragEvent, x: 0 },\n        this.dayColumnWidth,\n        true\n      );\n      const originalEvent = dayEvent.event;\n      const adjustedEvent = {\n        ...originalEvent,\n        ...newEventTimes,\n        meta: { ...originalEvent.meta, user: newUser },\n      };\n      const tempEvents = this.events.map((event) => {\n        if (event === originalEvent) {\n          return adjustedEvent;\n        }\n        return event;\n      });\n      this.restoreOriginalEvents(\n        tempEvents,\n        new Map([[adjustedEvent, originalEvent]])\n      );\n    }\n    this.dragAlreadyMoved = true;\n  }\n\n  dragEnded(\n    weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent,\n    dragEndEvent: DragEndEvent,\n    dayWidth: number,\n    useY = false\n  ) {\n    super.dragEnded(\n      weekEvent,\n      {\n        ...dragEndEvent,\n        x: 0,\n      },\n      dayWidth,\n      useY\n    );\n    const newUser = this.getDraggedUserColumn(weekEvent, dragEndEvent.x);\n    if (newUser && newUser !== weekEvent.event.meta.user) {\n      this.userChanged.emit({ event: weekEvent.event, newUser });\n    }\n  }\n\n  protected getWeekView(events: CalendarEvent[]) {\n    return this.utils.getWeekView({\n      events,\n      users: this.users,\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      precision: this.precision,\n      absolutePositionedEvents: true,\n      hourSegments: this.hourSegments,\n      dayStart: {\n        hour: this.dayStartHour,\n        minute: this.dayStartMinute,\n      },\n      dayEnd: {\n        hour: this.dayEndHour,\n        minute: this.dayEndMinute,\n      },\n      segmentHeight: this.hourSegmentHeight,\n      weekendDays: this.weekendDays,\n      ...getWeekViewPeriod(\n        this.dateAdapter,\n        this.viewDate,\n        this.weekStartsOn,\n        this.excludeDays,\n        this.daysInWeek\n      ),\n    });\n  }\n\n  private getDraggedUserColumn(\n    dayEvent: WeekViewTimeEvent | WeekViewAllDayEvent,\n    xPixels: number\n  ) {\n    const columnsMoved = Math.round(xPixels / this.dayColumnWidth);\n    const currentColumnIndex = this.view.users.findIndex(\n      (user) => user === dayEvent.event.meta.user\n    );\n    const newIndex = currentColumnIndex + columnsMoved;\n    return this.view.users[newIndex];\n  }\n}\n"},97200:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a="import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { DemoUtilsModule } from '../demo-utils/module';\nimport { DemoComponent } from './component';\nimport { DayViewSchedulerComponent } from './day-view-scheduler.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CalendarModule.forRoot({\n      provide: DateAdapter,\n      useFactory: adapterFactory,\n    }),\n    DemoUtilsModule,\n    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n  ],\n  declarations: [DemoComponent, DayViewSchedulerComponent],\n  exports: [DemoComponent],\n})\nexport class DemoModule {}\n"},49054:(e,n,s)=>{s.r(n),s.d(n,{default:()=>a});const a='<div class="row">\n  <div class="col-md-6">\n    <div class="btn-group">\n      <div\n        class="btn btn-primary"\n        mwlCalendarPreviousView\n        [view]="\'day\'"\n        [(viewDate)]="viewDate"\n      >\n        Previous\n      </div>\n      <div\n        class="btn btn-outline-secondary"\n        mwlCalendarToday\n        [(viewDate)]="viewDate"\n      >\n        Today\n      </div>\n      <div\n        class="btn btn-primary"\n        mwlCalendarNextView\n        [view]="\'day\'"\n        [(viewDate)]="viewDate"\n      >\n        Next\n      </div>\n    </div>\n  </div>\n  <div class="col-md-6 text-right">\n    <h3>{{ viewDate | calendarDate:(\'dayViewTitle\') }}</h3>\n  </div>\n</div>\n<br />\n\n<mwl-day-view-scheduler\n  [viewDate]="viewDate"\n  [events]="events"\n  [users]="users"\n  (eventTimesChanged)="eventTimesChanged($event)"\n  (userChanged)="userChanged($event)"\n>\n</mwl-day-view-scheduler>\n'}}]);